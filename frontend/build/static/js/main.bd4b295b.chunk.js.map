{"version":3,"sources":["components/button/button.tsx","util/http.ts","util/regex.ts","components/login/login.tsx","stores/product-store.ts","stores/user-store.ts","stores/order-store.ts","stores/context.ts","stores/index.ts","shop.tsx","components/product-card/product-card.tsx","components/navbar/navbar.tsx","components/loading-spinner/loading-spinner.tsx","stripe/checkout-form.tsx","stripe/stripe-container.tsx","components/context-message/context-message.tsx","reportWebVitals.ts","util/font-awesome-library.ts","index.tsx"],"names":["BUTTON_COLOR","CONTENT_TYPE","METHOD","Button","props","className","color","shown","onClick","children","EMAIL_REGEX","MODE","httpFetch","method","path","data","Promise","resolve","fetch","process","headers","JSON","body","stringify","then","response","json","httpResponse","status","catch","error","console","getApi","GET","postApi","POST","ProductStore","products","isIndexing","index","a","runInAction","successful","makeAutoObservable","this","reduce","mappedProducts","product","id","UserStore","user","isShowing","isCreating","show","userEmail","create","OrderStore","isPaying","order","pay","amount","productStore","userStore","orderStore","storeContext","createContext","useStore","useContext","SHOP_MODE","DEFAULT_USER","name","email","Login","observer","useState","edittedUser","setEdittedUser","LOGIN","mode","setMode","onSignIn","useEffect","loggedInUserEmail","localStorage","getItem","loggedIn","type","value","placeholder","onChange","event","target","ORANGE","loginMode","REGISTRATION","GREEN","match","onFail","ProductCard","style","backgroundColor","quantity","onAddToCart","icon","price","toFixed","Navbar","shopMode","CATALOGE","onShopModeChange","CART","inCartProductCount","fontSize","onSignOut","LoadingSpinner","CheckoutForm","store","complete","setComplete","isCreatingPaymentMethod","setIsCreatingPaymentMethod","stripe","useStripe","elements","useElements","handleSubmit","preventDefault","createPaymentMethod","card","getElement","CardElement","paymentMethod","onPaySuccess","log","message","onSubmit","onCancelButtonClick","stripeTestPromise","loadStripe","StripeContainer","ContextMessage","setMessage","showMessage","setShowMessage","isShowingMessage","timeoutId","window","setTimeout","onMessageClear","clearTimeout","Shop","setLoggedIn","shoppingCart","setShoppingCart","showStripeContainer","setShowStripeContainer","contextMessage","setContextMessage","useMemo","Object","entries","countAndTotal","productId","productCount","total","handleSignIn","isNew","setItem","storedShoppingCart","parse","handleFail","handleAddToCart","canAdd","newShoppingCart","handleProceedButtonClick","handlePaySuccess","removeItem","map","length","handleRemoveFromCart","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","FontAwesomeLibrary","initializeFontAwesomeLibrary","library","add","faSignOutAlt","faShoppingCart","faStore","faMinus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4b295b.chunk.js","sourcesContent":["import React from 'react';\nimport './button.scss';\n\nexport enum BUTTON_COLOR { \n    GREEN = 'green',\n    ORANGE = 'orange',\n}\n\ninterface ButtonProps {\n    children: React.ReactNode;\n    color: BUTTON_COLOR;\n    shown?: boolean;\n    onClick: () => void;\n}\n\nexport const Button = (props: ButtonProps) => {\n    return (\n        <div\n            className={`button ${props.color} ${props.shown !== false ? 'shown' : ''}`}\n            onClick={props.onClick}\n        >\n            {props.children}\n        </div>\n    );\n}","// env variable\nconst API_URL : (string | undefined) = process.env.REACT_APP_API_SERVER_URL;\n\nexport interface HttpResponse<T> {\n    successful: boolean;\n    data?: T;\n    error?: {\n        message: string;\n    };\n}\n\ninterface HttpResponseWithStatus<T> extends HttpResponse<T> {\n    status: Response['status'];\n}\n\nenum CONTENT_TYPE {\n    JSON = 'application/json',\n}\n\nenum METHOD {\n    GET = 'GET',\n    POST = 'POST',\n    PATCH = 'PATCH',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n}\n\nconst httpFetch = <T extends unknown>(\n    method: METHOD,\n    path: string,\n    data?: Partial<T>,\n): Promise<HttpResponseWithStatus<T>> => {\n    return new Promise(resolve => {\n        fetch(\n            `${API_URL}/${path}`,\n            {\n                method,\n                headers: {\n                    'Content-Type': CONTENT_TYPE.JSON,\n                },\n                body: data ? JSON.stringify(data) : null,\n            },\n        ).then(\n            response => {\n                response.json().then((httpResponse: HttpResponse<T>) => {\n                    resolve({\n                        ...httpResponse,\n                        status: response.status,\n                    });\n                });\n            },\n        ).catch(\n            error => {\n                console.error(error);\n            },\n        );\n    });\n};\n\nexport const getApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.GET, path);\n};\n\nexport const deleteApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.DELETE, path);\n};\n\nexport const postApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.POST, path, data);\n};\n\nexport const putApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.PUT, path, data);\n};","export const EMAIL_REGEX = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/;","import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/user';\nimport { Button, BUTTON_COLOR } from '../button/button';\nimport { EMAIL_REGEX } from '../../util/regex';\n\nimport './login.scss';\nimport { useStore } from '../../stores';\nimport { observer } from 'mobx-react';\n\ninterface LoginProps {\n    loggedIn: boolean;\n    onSignIn: (user: Partial<User> & Pick<User, 'email'>, isNew: boolean) => void;\n    onFail: (message: string) => void;\n}\n\nenum MODE {\n    LOGIN,\n    REGISTRATION,\n}\n\nconst DEFAULT_USER: User = {\n    name: '',\n    email: '',\n}\n\nexport const Login = observer((props: LoginProps) => {\n    const store = useStore();\n    const user = store.userStore.user;\n\n    const [edittedUser, setEdittedUser] = useState<User>(DEFAULT_USER);\n    const [mode, setMode] = useState<MODE>(MODE.LOGIN);\n    \n    const { onSignIn } = props;\n    useEffect(\n        () => {\n            if (!user) {\n                const loggedInUserEmail = localStorage.getItem('loggedInUserEmail');\n                if (loggedInUserEmail) {\n                    onSignIn({ email: loggedInUserEmail }, false);\n                }\n            }\n        },\n        [onSignIn, user],\n    );\n\n    const handleUserNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setEdittedUser(user => ({ ...user, name: event.target.value }));\n    };\n\n    const handleUserEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setEdittedUser(user => ({ ...user, email: event.target.value }));\n    };\n\n    const handleRegisterButtonClick = () => {\n        setMode(loginMode => loginMode === MODE.REGISTRATION ? MODE.LOGIN : MODE.REGISTRATION);\n    };\n\n    const handleAcceptButtonClick = () => {\n        if (edittedUser.email.match(EMAIL_REGEX)) {\n            if (mode === MODE.REGISTRATION) {\n                if (edittedUser.name) {\n                    props.onSignIn(edittedUser, true);\n                } else {\n                    props.onFail('Please insert your name.');\n                }\n            } else {\n                props.onSignIn({ email: edittedUser.email }, false);\n            }\n        } else {\n            props.onFail('Incorrect email format.');\n        }\n    };\n\n    return (\n        <div className={`login ${props.loggedIn ? '' : 'shown'}`}>\n            <div className=\"brand\">\n                shop<span className=\"secondary\">.io</span>\n            </div>\n            <input\n                className={`user-name-input ${mode === MODE.LOGIN ? '' : 'shown'}`}\n                type=\"text\"\n                name=\"name\"\n                value={edittedUser.name}\n                placeholder=\"Name: John Wick\"\n                onChange={handleUserNameChange}\n            />\n            <input\n                type=\"text\"\n                name=\"email\"\n                value={edittedUser.email}\n                placeholder=\"Email: myname@email.com\"\n                onChange={handleUserEmailChange}\n            />\n            <div className=\"buttons\">\n                <Button\n                    color={BUTTON_COLOR.ORANGE}\n                    onClick={handleRegisterButtonClick}\n                >\n                    {mode === MODE.REGISTRATION ? 'Sign In' : 'Sign Up'}\n                </Button>\n                <Button\n                    color={BUTTON_COLOR.GREEN}\n                    onClick={handleAcceptButtonClick}\n                >\n                    Accept\n                </Button>\n            </div>\n        </div>\n    );\n});","import { makeAutoObservable, runInAction } from 'mobx';\nimport type { Product } from '../types/product';\nimport { getApi } from '../util/http';\nimport type { Mapped } from '../types/mapped';\n\nexport class ProductStore {\n    products: Product[] = [];\n    isIndexing = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get mappedProducts() {\n        return this.products.reduce(\n            (mappedProducts, product) => ({\n                ...mappedProducts,\n                [product.id]: product,\n            }),\n            {} as Mapped<Product>,\n        );\n    }\n\n    get path() {\n        return 'product';\n    }\n\n    index = async () => {\n        this.isIndexing = true;\n\n        const response = await getApi<Product[]>(this.path);\n        runInAction(() => {\n            if (response.successful && response.data) {\n                this.products = response.data;\n            }\n        });\n\n        this.isIndexing = false;\n        \n        return response.successful;\n    }\n}","import { makeAutoObservable, runInAction } from 'mobx';\nimport type { User } from '../types/user';\nimport { getApi, postApi } from '../util/http';\n\nexport class UserStore {\n    user?: User;\n    isShowing = false;\n    isCreating = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get path() {\n        return 'user';\n    }\n\n    show = async (userEmail: User['email']) => {\n        this.isShowing = true;\n\n        const response = await getApi<User>(`${this.path}/${userEmail}`);\n        runInAction(() => {\n            if (response.successful && response.data) {\n                this.user = response.data;\n            }\n        });\n\n        this.isShowing = false;\n        \n        return response.successful;\n    }\n\n    create = async (user: User) => {\n        this.isCreating = true;\n\n        const response = await postApi<User>(this.path, user);\n        runInAction(() => {\n            if (response.successful && response.data) {\n                this.user = response.data;\n            }\n        });\n\n        this.isCreating = false;\n\n        return response.successful;\n    }\n}","import { makeAutoObservable } from 'mobx';\nimport { Order } from '../types/order';\nimport { postApi } from '../util/http';\n\nexport class OrderStore {\n    isCreating = false;\n    isPaying = false;\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get path() {\n        return 'order';\n    }\n\n    create = async (order: Order) => {\n        this.isCreating = true;\n\n        const response = await postApi<unknown>(this.path, order);\n\n        this.isCreating = false;\n\n        return response.successful;\n    }\n\n    pay = async (id: string, amount: number) => {\n        this.isPaying = true;\n\n        const response = await postApi<unknown>(`${this.path}/pay`, { id, amount })\n\n        this.isPaying = false;\n\n        return response.successful;\n    }\n}","import { createContext } from 'react';\nimport { ProductStore } from './product-store';\nimport { UserStore } from './user-store';\nimport { OrderStore } from './order-store';\n\nconst productStore = new ProductStore();\nconst userStore = new UserStore();\nconst orderStore = new OrderStore();\n\nexport const storeContext = createContext({\n    productStore,\n    userStore,\n    orderStore,\n});","import { useContext } from 'react';\nimport { storeContext } from './context';\n\nexport const useStore = () => useContext(storeContext);","import React, { useEffect, useMemo, useState } from 'react';\nimport { Login } from './components/login/login';\nimport { User } from './types/user';\nimport { useStore } from './stores';\nimport { ProductCard } from './components/product-card/product-card';\nimport { Navbar } from './components/navbar/navbar';\nimport { Product } from './types/product';\nimport { observer } from 'mobx-react';\nimport { Button, BUTTON_COLOR } from './components/button/button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ShoppingCart } from './types/shopping-cart';\nimport { StripeContainer } from './stripe/stripe-container';\nimport { ContextMessage } from './components/context-message/context-message';\n\nimport './shop.scss';\n\nexport enum SHOP_MODE {\n    CATALOGE,\n    CART,\n}\n\nexport const Shop = observer(() => {\n    const store = useStore();\n    const productStore = store.productStore;\n    const products = productStore.products;\n    const mappedProducts = productStore.mappedProducts;\n    const userStore = store.userStore;\n    const user = store.userStore.user;\n\n    const [loggedIn, setLoggedIn] = useState<boolean>(false);\n    const [shoppingCart, setShoppingCart] = useState<ShoppingCart>({});\n    const [mode, setMode] = useState<SHOP_MODE>(SHOP_MODE.CATALOGE);\n    const [showStripeContainer, setShowStripeContainer] = useState<boolean>(false);\n    const [contextMessage, setContextMessage] = useState<string>('');\n\n    useEffect(\n        () => {\n            if (mode === SHOP_MODE.CATALOGE) {\n                productStore.index();\n            }\n        },\n        [mode, productStore],\n    );\n\n    const { inCartProductCount, total } = useMemo(\n        () => {\n            return Object.entries(shoppingCart).reduce(\n                (countAndTotal, [productId, productCount]) => {\n                    const product = mappedProducts[productId];\n\n                    return {\n                        inCartProductCount: countAndTotal.inCartProductCount + productCount,\n                        total: product\n                            ? countAndTotal.total + (productCount * product.price)\n                            : 0,\n                    };\n                },\n                {\n                    inCartProductCount: 0,\n                    total: 0,\n                },\n            );\n        },\n        [shoppingCart, mappedProducts],\n    );\n\n    const handleSignIn = async (user: Partial<User> & Pick<User, 'email'>, isNew: boolean) => {\n        let successful = false;\n\n        if (isNew) {\n            successful = await userStore.create(user as User);\n        } else {\n            successful = await userStore.show(user.email);\n        }\n\n        if (successful) {\n            setLoggedIn(true);\n            setMode(SHOP_MODE.CATALOGE);\n            localStorage.setItem('loggedInUserEmail', user.email);\n            const storedShoppingCart = localStorage.getItem(`shoppingCart::${user.email}`);\n            if (storedShoppingCart) {\n                setShoppingCart(JSON.parse(storedShoppingCart));\n            }\n        } else {\n            handleFail('Your email is not registered, please sign up.')\n        }\n    };\n\n    const handleSignOut = () => {\n        setLoggedIn(false);\n        setShoppingCart({});\n        localStorage.removeItem('loggedInUserEmail');\n    };\n\n    const handleAddToCart = (product: Product) => {\n        setShoppingCart(shoppingCart => {\n            const productCount = (shoppingCart[product.id] || 0) + 1;\n\n            const canAdd = productCount <= product.quantity;\n\n            const newShoppingCart = canAdd\n                ? {\n                    ...shoppingCart,\n                    [product.id]: productCount,\n                } : shoppingCart;\n\n            if (!canAdd) {\n                handleFail('Not enough stock.')\n            }\n\n            if (user) {\n                localStorage.setItem(`shoppingCart::${user.email}`, JSON.stringify(newShoppingCart));\n            }\n\n            return newShoppingCart;\n        });\n    };\n\n    const handleRemoveFromCart = (productId: Product['id']) => {\n        setShoppingCart(shoppingCart => {\n            const productCount = (shoppingCart[productId] || 0) - 1;\n\n            const newShoppingCart = {\n                ...shoppingCart,\n            };\n\n            if (productCount === 0) {\n                delete newShoppingCart[productId];\n            } else if (productCount > 0) {\n                newShoppingCart[productId] = productCount;\n            }\n\n            if (user) {\n                localStorage.setItem(`shoppingCart::${user.email}`, JSON.stringify(newShoppingCart));\n            }\n\n            return newShoppingCart;\n        });\n    };\n\n    const handleModeChange = (mode: SHOP_MODE) => {\n        setMode(mode);\n    };\n\n    const handleProceedButtonClick = async () => {\n        setShowStripeContainer(true);\n    };\n\n    const handleCancelButtonClick = () => {\n        setShowStripeContainer(false);\n    };\n\n    const handlePaySuccess = async () => {\n        if (user) {\n            if (await store.orderStore.create({\n                shoppingCart,\n                user,\n            })) {\n                setShoppingCart({});\n                setShowStripeContainer(false);\n                localStorage.setItem(`shoppingCart::${user.email}`, JSON.stringify({}));\n            };\n        }\n    };\n\n    const handleFail = (message: string) => {\n        setContextMessage(message);\n    };\n\n    const handleMessageClear = () => {\n        setContextMessage('');\n    }\n\n    return (\n        <div className=\"shop\">\n            <Login\n                loggedIn={loggedIn}\n                onSignIn={handleSignIn}\n                onFail={handleFail}\n            />\n            <div className={`manager ${loggedIn ? 'shown' : ''}`}>\n                <Navbar\n                    shopMode={mode}\n                    inCartProductCount={inCartProductCount}\n                    onShopModeChange={handleModeChange}\n                    onSignOut={handleSignOut}\n                />\n                <div className=\"catalogue\">\n                    {products.map(product => (\n                        <ProductCard\n                            key={`product-${product.id}`}\n                            product={product}\n                            onAddToCart={handleAddToCart}\n                        />\n                    ))}\n                </div>\n                <div className={`cart ${mode === SHOP_MODE.CART ? 'shown' : ''}`}>\n                    <div className=\"summary\">\n                        <div className=\"table\">\n                            <div className=\"headers\">\n                                <div className=\"header\"/>\n                                <div className=\"header\">\n                                    Quantity\n                                </div>\n                                <div className=\"header\">\n                                    Image\n                                </div>\n                                <div className=\"header\">\n                                    Name\n                                </div>\n                                <div className=\"header\">\n                                    Subtotal\n                                </div>\n                            </div>\n                            {products.length > 0 && Object.entries(shoppingCart).map(([productId, productCount]) => {\n                                const product = mappedProducts[productId];\n\n                                return (\n                                    <div key={`row-${productId}`} className=\"row\">\n                                        <div className=\"cell\">\n                                            <div\n                                                className=\"remove-formatter\"\n                                                onClick={() => handleRemoveFromCart(+productId)}\n                                            >\n                                                <FontAwesomeIcon icon=\"minus\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"cell\">\n                                            <div className=\"quantity-formatter\">\n                                                {productCount}\n                                            </div>\n                                        </div>\n                                        <div className=\"cell\">\n                                            <div className=\"image-formatter\" style={{ backgroundColor: product?.color }}/>\n                                        </div>\n                                        <div className=\"cell\">\n                                            <div className=\"name-formatter\">\n                                                {product?.name}\n                                            </div>\n                                        </div>\n                                        <div className=\"cell\">\n                                            <div className=\"price-formatter\">\n                                                ${(((product?.price || 0) * productCount) / 100).toFixed(2)}\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div className=\"total\">\n                            <Button\n                                color={BUTTON_COLOR.GREEN}\n                                shown={total > 0 && !showStripeContainer}\n                                onClick={handleProceedButtonClick}\n                            >\n                                Proceed\n                            </Button>\n                            <StripeContainer\n                                amount={total}\n                                shown={showStripeContainer}\n                                onCancelButtonClick={handleCancelButtonClick}\n                                onPaySuccess={handlePaySuccess}\n                            />\n                            <div className=\"amount\">\n                                <div className=\"text\">\n                                    Total\n                                </div>\n                                <div className=\"number\">\n                                ${(total / 100).toFixed(2)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <ContextMessage message={contextMessage} onMessageClear={handleMessageClear}/>\n        </div>\n    );\n});\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport type { Product } from '../../types/product';\n\nimport './product-card.scss';\n\ninterface ProductCardProps {\n    product: Product;\n    onAddToCart: (product: Product) => void;\n}\n\nexport const ProductCard = (props: ProductCardProps) => {\n    const handleAddToCart = () => {\n        props.onAddToCart(props.product);\n    };\n\n    return (\n        <div className=\"product\">\n            <div className=\"card\">\n                <div className=\"image\" style={{ backgroundColor: props.product.color }}/>\n                <div className=\"name\">\n                    {props.product.name}\n                </div>\n                <div className=\"quantity\">\n                    {props.product.quantity}\n                </div>\n                <div className=\"add-to-cart\" onClick={handleAddToCart}>\n                    <FontAwesomeIcon icon=\"shopping-cart\"/> Add one\n                </div>\n            </div>\n            <div className=\"price\">\n                ${(props.product.price / 100).toFixed(2)}\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { SHOP_MODE } from '../../shop';\n\nimport './navbar.scss';\n\ninterface NavbarProps {\n    shopMode: SHOP_MODE;\n    inCartProductCount: number;\n    onShopModeChange: (mode: SHOP_MODE) => void;\n    onSignOut: () => void;\n}\n\nexport const Navbar = (props: NavbarProps) => {\n    const handleCatalogueActionClick = () => {\n        if (props.shopMode !== SHOP_MODE.CATALOGE) {\n            props.onShopModeChange(SHOP_MODE.CATALOGE);\n        }\n    }\n    \n    const handleCartActionClick = () => {\n        if (props.shopMode !== SHOP_MODE.CART) {\n            props.onShopModeChange(SHOP_MODE.CART);\n        }\n    }\n\n    return (\n        <div className=\"navbar\">\n            <div className=\"brand\">\n                shop<span className=\"secondary\">.io</span>\n            </div>\n            <div className=\"actions\">\n                <div\n                    className={`action ${props.shopMode === SHOP_MODE.CATALOGE ? 'selected' : ''}`}\n                    onClick={handleCatalogueActionClick}\n                >\n                    <FontAwesomeIcon icon=\"store\"/>\n                    <div className=\"selected-indicator\"/>\n                </div>\n                <div\n                    className={`action ${props.shopMode === SHOP_MODE.CART ? 'selected' : ''}`}\n                    onClick={handleCartActionClick}\n                >\n                    <FontAwesomeIcon icon=\"shopping-cart\"/>\n                    <div className={`counter ${props.inCartProductCount > 0 ? 'shown' : ''}`}>\n                        {props.inCartProductCount}\n                    </div>\n                    <div className=\"selected-indicator\"/>\n                </div>\n                <div\n                    className=\"action\"\n                    style={{ fontSize: 18 }}\n                    onClick={props.onSignOut}\n                >\n                    <FontAwesomeIcon icon=\"sign-out-alt\"/>\n                    <div className=\"selected-indicator\"/>\n                </div>\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport './loading-spinner.scss';\n\nexport const LoadingSpinner = () => {\n    return (\n        <div className=\"loading-spinner\"><div/><div/><div/><div/></div>\n    );\n}","import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useStore } from '../stores';\nimport { Button, BUTTON_COLOR } from '../components/button/button';\nimport { LoadingSpinner } from '../components/loading-spinner/loading-spinner';\n\nimport './checkout-form.scss';\nimport { StripeCardElementChangeEvent } from '@stripe/stripe-js';\nimport { observer } from 'mobx-react';\n\ninterface CheckoutFormProps {\n    amount: number;\n    shown: boolean;\n    onCancelButtonClick: () => void;\n    onPaySuccess: () => void;\n}\n\nexport const CheckoutForm = observer((props: CheckoutFormProps) => {\n    const store = useStore();\n    const isPaying = store.orderStore.isPaying || store.orderStore.isCreating;\n    const [complete, setComplete] = useState<boolean>(false);\n    const [isCreatingPaymentMethod, setIsCreatingPaymentMethod] = useState<boolean>(false);\n\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (stripe && elements) {\n            setIsCreatingPaymentMethod(true);\n            const { error, paymentMethod } = await stripe.createPaymentMethod({\n                type: \"card\",\n                card: elements.getElement(CardElement)!,\n            });\n            setIsCreatingPaymentMethod(false);\n    \n            if (!error) {\n                if (paymentMethod) {\n                    if (await store.orderStore.pay(paymentMethod.id, props.amount)) {\n                        props.onPaySuccess();\n                    }\n                }\n            } else {\n                console.log(error.message);\n            }\n        }\n    };\n\n    const handleChange = ({ complete }: StripeCardElementChangeEvent) => {\n        setComplete(complete);\n    };\n\n    return (\n        <div className={`checkout-form ${props.shown ? 'shown' : ''}`}>\n            <form onSubmit={handleSubmit}>\n                <CardElement onChange={handleChange}/>\n                <div className=\"buttons\">\n                    <Button color={BUTTON_COLOR.ORANGE} onClick={props.onCancelButtonClick}>\n                        Cancel\n                    </Button>\n                    <button className={complete ? '' : 'disabled'}>\n                        {(isPaying || isCreatingPaymentMethod) ? <LoadingSpinner/> : 'Pay'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n});","import React from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { CheckoutForm } from './checkout-form';\n\nconst PUBLIC_KEY = process.env.REACT_APP_STRIPE_PUBLIC_KEY || '';\n\nconst stripeTestPromise = loadStripe(PUBLIC_KEY);\n\ninterface StripeContainerProps {\n    amount: number;\n    shown: boolean;\n    onCancelButtonClick: () => void;\n    onPaySuccess: () => void;\n}\n\nexport const StripeContainer = (props: StripeContainerProps) => {\n    return (\n        <Elements stripe={stripeTestPromise}>\n            <CheckoutForm\n                amount={props.amount}\n                shown={props.shown}\n                onCancelButtonClick={props.onCancelButtonClick}\n                onPaySuccess={props.onPaySuccess}\n            />\n        </Elements>\n    );\n};","import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport './context-message.scss';\n\ninterface ContextMessageProps {\n    message: string;\n    onMessageClear: () => void;\n}\n\nexport const ContextMessage = (props: ContextMessageProps) => {\n    const [message, setMessage] = useState<string>('');\n    const [showMessage, setShowMessage] = useState<boolean>(false);\n\n    useEffect(\n        () => {\n            if (props.message) {\n                const isShowingMessage = showMessage;\n                setMessage(props.message);\n                setShowMessage(true);\n\n                if (!isShowingMessage) {\n                    const timeoutId = window.setTimeout(\n                        () => {\n                            setShowMessage(false);\n\n                            window.setTimeout(\n                                () => {\n                                    props.onMessageClear();\n                                },\n                                300,\n                            )\n                        },\n                        3000,\n                    )\n    \n                    return () => {\n                        window.clearTimeout(timeoutId);\n                    }\n                }\n            }\n        },\n        [props.message],\n    );\n\n    return (\n        <div className={`context-message ${showMessage ? 'shown' : ''}`}>\n            {message || ''}\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n    faSignOutAlt,\n    faShoppingCart,\n    faStore,\n    faMinus,\n} from '@fortawesome/free-solid-svg-icons';\n\nexport class FontAwesomeLibrary {\n    static initializeFontAwesomeLibrary = () => {\n        library.add(\n            faSignOutAlt,\n            faShoppingCart,\n            faStore,\n            faMinus,\n        );\n    };\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Shop } from './shop';\nimport reportWebVitals from './reportWebVitals';\nimport { FontAwesomeLibrary } from './util/font-awesome-library';\n\nFontAwesomeLibrary.initializeFontAwesomeLibrary();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Shop />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}