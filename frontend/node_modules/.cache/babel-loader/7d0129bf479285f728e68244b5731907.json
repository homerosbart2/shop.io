{"ast":null,"code":"// env variable\nconst API_URL = process.env.REACT_APP_API_SERVER_URL;\nvar CONTENT_TYPE;\n\n(function (CONTENT_TYPE) {\n  CONTENT_TYPE[\"JSON\"] = \"application/json\";\n})(CONTENT_TYPE || (CONTENT_TYPE = {}));\n\nvar METHOD;\n\n(function (METHOD) {\n  METHOD[\"GET\"] = \"GET\";\n  METHOD[\"POST\"] = \"POST\";\n  METHOD[\"PATCH\"] = \"PATCH\";\n  METHOD[\"PUT\"] = \"PUT\";\n  METHOD[\"DELETE\"] = \"DELETE\";\n})(METHOD || (METHOD = {}));\n\nconst httpFetch = (method, path, data) => {\n  return new Promise(resolve => {\n    fetch(`${API_URL}/${path}`, {\n      method,\n      headers: {\n        'Content-Type': CONTENT_TYPE.JSON\n      },\n      body: data ? JSON.stringify(data) : null\n    }).then(response => {\n      response.json().then(httpResponse => {\n        resolve({ ...httpResponse,\n          status: response.status\n        });\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  });\n};\n\nexport const getApi = path => {\n  return httpFetch(METHOD.GET, path);\n};\nexport const deleteApi = path => {\n  return httpFetch(METHOD.DELETE, path);\n};\nexport const postApi = (path, data) => {\n  return httpFetch(METHOD.POST, path, data);\n};\nexport const putApi = (path, data) => {\n  return httpFetch(METHOD.PUT, path, data);\n};","map":{"version":3,"sources":["/Users/hcampos/Documents/REACT/shop.io/frontend/src/util/http.ts"],"names":["API_URL","process","env","REACT_APP_API_SERVER_URL","CONTENT_TYPE","METHOD","httpFetch","method","path","data","Promise","resolve","fetch","headers","JSON","body","stringify","then","response","json","httpResponse","status","catch","error","console","getApi","GET","deleteApi","DELETE","postApi","POST","putApi","PUT"],"mappings":"AAAA;AACA,MAAMA,OAA8B,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAnD;IAcKC,Y;;WAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;IAIAC,M;;WAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AAQL,MAAMC,SAAS,GAAG,CACdC,MADc,EAEdC,IAFc,EAGdC,IAHc,KAIuB;AACrC,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BC,IAAAA,KAAK,CACA,GAAEZ,OAAQ,IAAGQ,IAAK,EADlB,EAED;AACID,MAAAA,MADJ;AAEIM,MAAAA,OAAO,EAAE;AACL,wBAAgBT,YAAY,CAACU;AADxB,OAFb;AAKIC,MAAAA,IAAI,EAAEN,IAAI,GAAGK,IAAI,CAACE,SAAL,CAAeP,IAAf,CAAH,GAA0B;AALxC,KAFC,CAAL,CASEQ,IATF,CAUIC,QAAQ,IAAI;AACRA,MAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBG,YAAD,IAAmC;AACpDT,QAAAA,OAAO,CAAC,EACJ,GAAGS,YADC;AAEJC,UAAAA,MAAM,EAAEH,QAAQ,CAACG;AAFb,SAAD,CAAP;AAIH,OALD;AAMH,KAjBL,EAkBEC,KAlBF,CAmBIC,KAAK,IAAI;AACLC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KArBL;AAuBH,GAxBM,CAAP;AAyBH,CA9BD;;AAgCA,OAAO,MAAME,MAAM,GAAuBjB,IAApB,IAAyE;AAC3F,SAAOF,SAAS,CAAID,MAAM,CAACqB,GAAX,EAAgBlB,IAAhB,CAAhB;AACH,CAFM;AAIP,OAAO,MAAMmB,SAAS,GAAuBnB,IAApB,IAAyE;AAC9F,SAAOF,SAAS,CAAID,MAAM,CAACuB,MAAX,EAAmBpB,IAAnB,CAAhB;AACH,CAFM;AAIP,OAAO,MAAMqB,OAAO,GAAG,CAAoBrB,IAApB,EAAkCC,IAAlC,KAA2F;AAC9G,SAAOH,SAAS,CAAID,MAAM,CAACyB,IAAX,EAAiBtB,IAAjB,EAAuBC,IAAvB,CAAhB;AACH,CAFM;AAIP,OAAO,MAAMsB,MAAM,GAAG,CAAoBvB,IAApB,EAAkCC,IAAlC,KAA2F;AAC7G,SAAOH,SAAS,CAAID,MAAM,CAAC2B,GAAX,EAAgBxB,IAAhB,EAAsBC,IAAtB,CAAhB;AACH,CAFM","sourcesContent":["// env variable\nconst API_URL : (string |Â undefined) = process.env.REACT_APP_API_SERVER_URL;\n\nexport interface HttpResponse<T> {\n    successful: boolean;\n    data?: T;\n    error?: {\n        message: string;\n    };\n}\n\ninterface HttpResponseWithStatus<T> extends HttpResponse<T> {\n    status: Response['status'];\n}\n\nenum CONTENT_TYPE {\n    JSON = 'application/json',\n}\n\nenum METHOD {\n    GET = 'GET',\n    POST = 'POST',\n    PATCH = 'PATCH',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n}\n\nconst httpFetch = <T extends unknown>(\n    method: METHOD,\n    path: string,\n    data?: Partial<T>,\n): Promise<HttpResponseWithStatus<T>> => {\n    return new Promise(resolve => {\n        fetch(\n            `${API_URL}/${path}`,\n            {\n                method,\n                headers: {\n                    'Content-Type': CONTENT_TYPE.JSON,\n                },\n                body: data ? JSON.stringify(data) : null,\n            },\n        ).then(\n            response => {\n                response.json().then((httpResponse: HttpResponse<T>) => {\n                    resolve({\n                        ...httpResponse,\n                        status: response.status,\n                    });\n                });\n            },\n        ).catch(\n            error => {\n                console.error(error);\n            },\n        );\n    });\n};\n\nexport const getApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.GET, path);\n};\n\nexport const deleteApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.DELETE, path);\n};\n\nexport const postApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.POST, path, data);\n};\n\nexport const putApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.PUT, path, data);\n};"]},"metadata":{},"sourceType":"module"}