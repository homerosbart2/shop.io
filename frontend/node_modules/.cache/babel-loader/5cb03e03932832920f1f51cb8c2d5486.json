{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hcampos/Documents/REACT/shop.io/frontend/src/stripe/checkout-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useStore } from '../stores';\nimport { Button, BUTTON_COLOR } from '../components/button/button';\nimport { LoadingSpinner } from '../components/loading-spinner/loading-spinner';\nimport './checkout-form.scss';\nimport { observer } from 'mobx-react';\nexport const CheckoutForm = observer(_c = _s(props => {\n  _s();\n\n  const store = useStore();\n  const isPaying = store.orderStore.isPaying || store.orderStore.isCreating;\n  const [complete, setComplete] = useState(false);\n  const [isCreatingPaymentMethod, setIsCreatingPaymentMethod] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (stripe && elements) {\n      setIsCreatingPaymentMethod(true);\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: elements.getElement(CardElement)\n      });\n      setIsCreatingPaymentMethod(false);\n\n      if (!error) {\n        if (paymentMethod) {\n          if (await store.orderStore.pay(paymentMethod.id, props.amount)) {\n            props.onPaySuccess();\n          }\n        }\n      } else {\n        console.log(error.message);\n      }\n    }\n  };\n\n  const handleChange = ({\n    complete\n  }) => {\n    setComplete(complete);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `checkout-form ${props.shown ? 'shown' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: BUTTON_COLOR.ORANGE,\n          onClick: props.onCancelButtonClick,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: complete ? '' : 'disabled',\n          children: isPaying || isCreatingPaymentMethod ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 66\n          }, this) : 'Pay'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}, \"8x5uk2yD7ohnQgEtJoGGg/wUI5E=\", false, function () {\n  return [useStore, useStripe, useElements];\n}));\n_c2 = CheckoutForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm$observer\");\n$RefreshReg$(_c2, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/hcampos/Documents/REACT/shop.io/frontend/src/stripe/checkout-form.tsx"],"names":["React","useState","CardElement","useStripe","useElements","useStore","Button","BUTTON_COLOR","LoadingSpinner","observer","CheckoutForm","props","store","isPaying","orderStore","isCreating","complete","setComplete","isCreatingPaymentMethod","setIsCreatingPaymentMethod","stripe","elements","handleSubmit","event","preventDefault","error","paymentMethod","createPaymentMethod","type","card","getElement","pay","id","amount","onPaySuccess","console","log","message","handleChange","shown","ORANGE","onCancelButtonClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useStore } from '../stores';\nimport { Button, BUTTON_COLOR } from '../components/button/button';\nimport { LoadingSpinner } from '../components/loading-spinner/loading-spinner';\n\nimport './checkout-form.scss';\nimport { StripeCardElementChangeEvent } from '@stripe/stripe-js';\nimport { observer } from 'mobx-react';\n\ninterface CheckoutFormProps {\n    amount: number;\n    shown: boolean;\n    onCancelButtonClick: () => void;\n    onPaySuccess: () => void;\n}\n\nexport const CheckoutForm = observer((props: CheckoutFormProps) => {\n    const store = useStore();\n    const isPaying = store.orderStore.isPaying || store.orderStore.isCreating;\n    const [complete, setComplete] = useState<boolean>(false);\n    const [isCreatingPaymentMethod, setIsCreatingPaymentMethod] = useState<boolean>(false);\n\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (stripe && elements) {\n            setIsCreatingPaymentMethod(true);\n            const { error, paymentMethod } = await stripe.createPaymentMethod({\n                type: \"card\",\n                card: elements.getElement(CardElement)!,\n            });\n            setIsCreatingPaymentMethod(false);\n    \n            if (!error) {\n                if (paymentMethod) {\n                    if (await store.orderStore.pay(paymentMethod.id, props.amount)) {\n                        props.onPaySuccess();\n                    }\n                }\n            } else {\n                console.log(error.message);\n            }\n        }\n    };\n\n    const handleChange = ({ complete }: StripeCardElementChangeEvent) => {\n        setComplete(complete);\n    };\n\n    return (\n        <div className={`checkout-form ${props.shown ? 'shown' : ''}`}>\n            <form onSubmit={handleSubmit}>\n                <CardElement onChange={handleChange}/>\n                <div className=\"buttons\">\n                    <Button color={BUTTON_COLOR.ORANGE} onClick={props.onCancelButtonClick}>\n                        Cancel\n                    </Button>\n                    <button className={complete ? '' : 'disabled'}>\n                        {(isPaying || isCreatingPaymentMethod) ? <LoadingSpinner/> : 'Pay'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n});"]},"metadata":{},"sourceType":"module"}