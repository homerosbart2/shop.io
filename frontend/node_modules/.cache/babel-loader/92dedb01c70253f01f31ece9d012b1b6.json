{"ast":null,"code":"import _objectSpread from\"/Users/hcampos/Documents/REACT/shop.io/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// env variable\nvar API_URL=process.env.REACT_APP_API_SERVER_URL;var CONTENT_TYPE;(function(CONTENT_TYPE){CONTENT_TYPE[\"JSON\"]=\"application/json\";})(CONTENT_TYPE||(CONTENT_TYPE={}));var METHOD;(function(METHOD){METHOD[\"GET\"]=\"GET\";METHOD[\"POST\"]=\"POST\";METHOD[\"PATCH\"]=\"PATCH\";METHOD[\"PUT\"]=\"PUT\";METHOD[\"DELETE\"]=\"DELETE\";})(METHOD||(METHOD={}));var httpFetch=function httpFetch(method,path,data){return new Promise(function(resolve){fetch(\"\".concat(API_URL,\"/\").concat(path),{method:method,headers:{'Content-Type':CONTENT_TYPE.JSON},body:data?JSON.stringify(data):null}).then(function(response){response.json().then(function(httpResponse){resolve(_objectSpread(_objectSpread({},httpResponse),{},{status:response.status}));});}).catch(function(error){console.error(error);});});};export var getApi=function getApi(path){return httpFetch(METHOD.GET,path);};export var deleteApi=function deleteApi(path){return httpFetch(METHOD.DELETE,path);};export var postApi=function postApi(path,data){return httpFetch(METHOD.POST,path,data);};export var putApi=function putApi(path,data){return httpFetch(METHOD.PUT,path,data);};","map":{"version":3,"sources":["/Users/hcampos/Documents/REACT/shop.io/frontend/src/util/http.ts"],"names":["API_URL","process","env","REACT_APP_API_SERVER_URL","CONTENT_TYPE","METHOD","httpFetch","method","path","data","Promise","resolve","fetch","headers","JSON","body","stringify","then","response","json","httpResponse","status","catch","error","console","getApi","GET","deleteApi","DELETE","postApi","POST","putApi","PUT"],"mappings":"qKAAA;AACA,GAAMA,CAAAA,OAA8B,CAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAnD,C,GAcKC,CAAAA,Y,WAAAA,Y,EAAAA,Y,+BAAAA,Y,GAAAA,Y,SAIAC,CAAAA,M,WAAAA,M,EAAAA,M,cAAAA,M,gBAAAA,M,kBAAAA,M,cAAAA,M,uBAAAA,M,GAAAA,M,MAQL,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACdC,MADc,CAEdC,IAFc,CAGdC,IAHc,CAIuB,CACrC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,CAAI,CAC1BC,KAAK,WACEZ,OADF,aACaQ,IADb,EAED,CACID,MAAM,CAANA,MADJ,CAEIM,OAAO,CAAE,CACL,eAAgBT,YAAY,CAACU,IADxB,CAFb,CAKIC,IAAI,CAAEN,IAAI,CAAGK,IAAI,CAACE,SAAL,CAAeP,IAAf,CAAH,CAA0B,IALxC,CAFC,CAAL,CASEQ,IATF,CAUI,SAAAC,QAAQ,CAAI,CACRA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,SAACG,YAAD,CAAmC,CACpDT,OAAO,gCACAS,YADA,MAEHC,MAAM,CAAEH,QAAQ,CAACG,MAFd,GAAP,CAIH,CALD,EAMH,CAjBL,EAkBEC,KAlBF,CAmBI,SAAAC,KAAK,CAAI,CACLC,OAAO,CAACD,KAAR,CAAcA,KAAd,EACH,CArBL,EAuBH,CAxBM,CAAP,CAyBH,CA9BD,CAgCA,MAAO,IAAME,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAoBjB,IAApB,CAAyE,CAC3F,MAAOF,CAAAA,SAAS,CAAID,MAAM,CAACqB,GAAX,CAAgBlB,IAAhB,CAAhB,CACH,CAFM,CAIP,MAAO,IAAMmB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAoBnB,IAApB,CAAyE,CAC9F,MAAOF,CAAAA,SAAS,CAAID,MAAM,CAACuB,MAAX,CAAmBpB,IAAnB,CAAhB,CACH,CAFM,CAIP,MAAO,IAAMqB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAoBrB,IAApB,CAAkCC,IAAlC,CAA2F,CAC9G,MAAOH,CAAAA,SAAS,CAAID,MAAM,CAACyB,IAAX,CAAiBtB,IAAjB,CAAuBC,IAAvB,CAAhB,CACH,CAFM,CAIP,MAAO,IAAMsB,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAoBvB,IAApB,CAAkCC,IAAlC,CAA2F,CAC7G,MAAOH,CAAAA,SAAS,CAAID,MAAM,CAAC2B,GAAX,CAAgBxB,IAAhB,CAAsBC,IAAtB,CAAhB,CACH,CAFM","sourcesContent":["// env variable\nconst API_URL : (string |Â undefined) = process.env.REACT_APP_API_SERVER_URL;\n\nexport interface HttpResponse<T> {\n    successful: boolean;\n    data?: T;\n    error?: {\n        message: string;\n    };\n}\n\ninterface HttpResponseWithStatus<T> extends HttpResponse<T> {\n    status: Response['status'];\n}\n\nenum CONTENT_TYPE {\n    JSON = 'application/json',\n}\n\nenum METHOD {\n    GET = 'GET',\n    POST = 'POST',\n    PATCH = 'PATCH',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n}\n\nconst httpFetch = <T extends unknown>(\n    method: METHOD,\n    path: string,\n    data?: Partial<T>,\n): Promise<HttpResponseWithStatus<T>> => {\n    return new Promise(resolve => {\n        fetch(\n            `${API_URL}/${path}`,\n            {\n                method,\n                headers: {\n                    'Content-Type': CONTENT_TYPE.JSON,\n                },\n                body: data ? JSON.stringify(data) : null,\n            },\n        ).then(\n            response => {\n                response.json().then((httpResponse: HttpResponse<T>) => {\n                    resolve({\n                        ...httpResponse,\n                        status: response.status,\n                    });\n                });\n            },\n        ).catch(\n            error => {\n                console.error(error);\n            },\n        );\n    });\n};\n\nexport const getApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.GET, path);\n};\n\nexport const deleteApi = <T extends unknown>(path: string): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.DELETE, path);\n};\n\nexport const postApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.POST, path, data);\n};\n\nexport const putApi = <T extends unknown>(path: string, data: Partial<T>): Promise<HttpResponseWithStatus<T>> => {\n    return httpFetch<T>(METHOD.PUT, path, data);\n};"]},"metadata":{},"sourceType":"module"}