{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hcampos/Documents/REACT/shop.io/frontend/src/components/login/login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, BUTTON_COLOR } from '../button/button';\nimport { EMAIL_REGEX } from '../../util/regex';\nimport './login.scss';\nimport { useStore } from '../../stores';\nimport { observer } from 'mobx-react';\nvar MODE;\n\n(function (MODE) {\n  MODE[MODE[\"LOGIN\"] = 0] = \"LOGIN\";\n  MODE[MODE[\"REGISTRATION\"] = 1] = \"REGISTRATION\";\n})(MODE || (MODE = {}));\n\nconst DEFAULT_USER = {\n  name: '',\n  email: ''\n};\nexport const Login = observer(_c = _s(props => {\n  _s();\n\n  const store = useStore();\n  const user = store.userStore.user;\n  const [edittedUser, setEdittedUser] = useState(DEFAULT_USER);\n  const [mode, setMode] = useState(MODE.LOGIN);\n  const {\n    onSignIn\n  } = props;\n  useEffect(() => {\n    if (!user) {\n      const loggedInUserEmail = localStorage.getItem('loggedInUserEmail');\n\n      if (loggedInUserEmail) {\n        onSignIn({\n          email: loggedInUserEmail\n        }, false);\n      }\n    }\n  }, [onSignIn, user]);\n\n  const handleUserNameChange = event => {\n    setEdittedUser(user => ({ ...user,\n      name: event.target.value\n    }));\n  };\n\n  const handleUserEmailChange = event => {\n    setEdittedUser(user => ({ ...user,\n      email: event.target.value\n    }));\n  };\n\n  const handleRegisterButtonClick = () => {\n    setMode(loginMode => loginMode === MODE.REGISTRATION ? MODE.LOGIN : MODE.REGISTRATION);\n  };\n\n  const handleAcceptButtonClick = () => {\n    if (edittedUser.email.match(EMAIL_REGEX)) {\n      if (mode === MODE.REGISTRATION) {\n        if (edittedUser.name) {\n          props.onSignIn(edittedUser, true);\n        } else {\n          props.onFail('Please insert your name.');\n        }\n      } else {\n        props.onSignIn({\n          email: edittedUser.email\n        }, false);\n      }\n    } else {\n      props.onFail('Incorrect email format.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `login ${props.loggedIn ? '' : 'shown'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"brand\",\n      children: [\"shop\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"secondary\",\n        children: \".io\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: `user-name-input ${mode === MODE.LOGIN ? '' : 'shown'}`,\n      type: \"text\",\n      name: \"name\",\n      value: edittedUser.name,\n      placeholder: \"Name: John Wick\",\n      onChange: handleUserNameChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      value: edittedUser.email,\n      placeholder: \"Email: myname@email.com\",\n      onChange: handleUserEmailChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: BUTTON_COLOR.ORANGE,\n        onClick: handleRegisterButtonClick,\n        children: mode === MODE.REGISTRATION ? 'Sign In' : 'Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: BUTTON_COLOR.GREEN,\n        onClick: handleAcceptButtonClick,\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}, \"H04Bzr4OoJ6I0xlwx5wbu6RVPLU=\", false, function () {\n  return [useStore];\n}));\n_c2 = Login;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Login$observer\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["/Users/hcampos/Documents/REACT/shop.io/frontend/src/components/login/login.tsx"],"names":["React","useEffect","useState","Button","BUTTON_COLOR","EMAIL_REGEX","useStore","observer","MODE","DEFAULT_USER","name","email","Login","props","store","user","userStore","edittedUser","setEdittedUser","mode","setMode","LOGIN","onSignIn","loggedInUserEmail","localStorage","getItem","handleUserNameChange","event","target","value","handleUserEmailChange","handleRegisterButtonClick","loginMode","REGISTRATION","handleAcceptButtonClick","match","onFail","loggedIn","ORANGE","GREEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/user';\nimport { Button, BUTTON_COLOR } from '../button/button';\nimport { EMAIL_REGEX } from '../../util/regex';\n\nimport './login.scss';\nimport { useStore } from '../../stores';\nimport { observer } from 'mobx-react';\n\ninterface LoginProps {\n    loggedIn: boolean;\n    onSignIn: (user: Partial<User> & Pick<User, 'email'>, isNew: boolean) => void;\n    onFail: (message: string) => void;\n}\n\nenum MODE {\n    LOGIN,\n    REGISTRATION,\n}\n\nconst DEFAULT_USER: User = {\n    name: '',\n    email: '',\n}\n\nexport const Login = observer((props: LoginProps) => {\n    const store = useStore();\n    const user = store.userStore.user;\n\n    const [edittedUser, setEdittedUser] = useState<User>(DEFAULT_USER);\n    const [mode, setMode] = useState<MODE>(MODE.LOGIN);\n    \n    const { onSignIn } = props;\n    useEffect(\n        () => {\n            if (!user) {\n                const loggedInUserEmail = localStorage.getItem('loggedInUserEmail');\n                if (loggedInUserEmail) {\n                    onSignIn({ email: loggedInUserEmail }, false);\n                }\n            }\n        },\n        [onSignIn, user],\n    );\n\n    const handleUserNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setEdittedUser(user => ({ ...user, name: event.target.value }));\n    };\n\n    const handleUserEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setEdittedUser(user => ({ ...user, email: event.target.value }));\n    };\n\n    const handleRegisterButtonClick = () => {\n        setMode(loginMode => loginMode === MODE.REGISTRATION ? MODE.LOGIN : MODE.REGISTRATION);\n    };\n\n    const handleAcceptButtonClick = () => {\n        if (edittedUser.email.match(EMAIL_REGEX)) {\n            if (mode === MODE.REGISTRATION) {\n                if (edittedUser.name) {\n                    props.onSignIn(edittedUser, true);\n                } else {\n                    props.onFail('Please insert your name.');\n                }\n            } else {\n                props.onSignIn({ email: edittedUser.email }, false);\n            }\n        } else {\n            props.onFail('Incorrect email format.');\n        }\n    };\n\n    return (\n        <div className={`login ${props.loggedIn ? '' : 'shown'}`}>\n            <div className=\"brand\">\n                shop<span className=\"secondary\">.io</span>\n            </div>\n            <input\n                className={`user-name-input ${mode === MODE.LOGIN ? '' : 'shown'}`}\n                type=\"text\"\n                name=\"name\"\n                value={edittedUser.name}\n                placeholder=\"Name: John Wick\"\n                onChange={handleUserNameChange}\n            />\n            <input\n                type=\"text\"\n                name=\"email\"\n                value={edittedUser.email}\n                placeholder=\"Email: myname@email.com\"\n                onChange={handleUserEmailChange}\n            />\n            <div className=\"buttons\">\n                <Button\n                    color={BUTTON_COLOR.ORANGE}\n                    onClick={handleRegisterButtonClick}\n                >\n                    {mode === MODE.REGISTRATION ? 'Sign In' : 'Sign Up'}\n                </Button>\n                <Button\n                    color={BUTTON_COLOR.GREEN}\n                    onClick={handleAcceptButtonClick}\n                >\n                    Accept\n                </Button>\n            </div>\n        </div>\n    );\n});"]},"metadata":{},"sourceType":"module"}